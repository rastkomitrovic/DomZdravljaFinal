/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.doktor;

import controler.Controller;
import domain.VrstaSpecijaliste;
import form.FormMode;
import java.awt.Frame;
import java.net.SocketException;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import sesion.Session;
import thread.MojInterfejs;
import thread.ThreadClock;

/**
 *
 * @author Rastko
 */
public class FormDoktorTable extends javax.swing.JDialog implements MojInterfejs{

    /**
     * Creates new form FormDoktorTable
     */
    private Thread tht;
    private ThreadClock thc;
    public FormDoktorTable(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            initComponents();
            tblDoktor.setModel(new TableModelDoktor(this));
            setTable();
            setLocationRelativeTo(null);
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            thc=new ThreadClock(txtClock);
            thc.start();
            tht=new Thread((TableModelDoktor)tblDoktor.getModel());
            tht.start();
            Session.getInstance().getThread().setMojInterfejs(this);
        } catch (Exception ex) {
            if(ex instanceof SocketException)
                endProgram();
              ex.printStackTrace();
            //Logger.getLogger(FormDoktorTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

        public void endProgram(){
        JOptionPane.showMessageDialog(rootPane, "Server vam je prekinuo konekciju");
        this.dispose();      
        System.exit(0);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoktor = new javax.swing.JTable();
        btnPrikazi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPretraga = new javax.swing.JTextField();
        txtClock = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        tblDoktor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDoktor);

        btnPrikazi.setText("Prikazi");
        btnPrikazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziActionPerformed(evt);
            }
        });

        jLabel1.setText("Pretraga po prezimenu lekara");

        txtPretraga.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPretragaKeyReleased(evt);
            }
        });

        txtClock.setText("jLabel2");

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPrikazi)
                    .addComponent(jLabel1)
                    .addComponent(txtClock)
                    .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnPrikazi)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtClock)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrikaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziActionPerformed
        int i=tblDoktor.getSelectedRow();
        if(i==-1)
            JOptionPane.showMessageDialog(rootPane, "Niste izabrali lekara za prikazivanje");
        else
            new FormDoktor((Frame)this.getParent(), true , FormMode.View, ((TableModelDoktor)tblDoktor.getModel()).getSelectedDoktor(i)).setVisible(true);
    }//GEN-LAST:event_btnPrikaziActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        try {
            ((TableModelDoktor)tblDoktor.getModel()).refreshTable();
            Session.getInstance().getThread().setMojInterfejs(this);
        } catch (Exception ex) {
            if(ex instanceof SocketException)
                endProgram();
            ex.printStackTrace();
           // Logger.getLogger(FormDoktorTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowGainedFocus

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        tht.interrupt();
        thc.interrupt();
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtPretragaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretragaKeyReleased
        try {
            String kriterijum=txtPretraga.getText().trim();
            TableModelDoktor tbm=(TableModelDoktor)tblDoktor.getModel();
            tbm.pretraga(kriterijum);
        } catch (Exception ex) {
            if(ex instanceof SocketException){
                endProgram();
            }
            else{
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            }
        }
    }//GEN-LAST:event_txtPretragaKeyReleased

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPrikazi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDoktor;
    private javax.swing.JLabel txtClock;
    private javax.swing.JTextField txtPretraga;
    // End of variables declaration//GEN-END:variables

    private void setTable() {
        try {
            JComboBox<VrstaSpecijaliste> cmbVrste=new JComboBox<>();
            cmbVrste.removeAllItems();
            for(VrstaSpecijaliste vr :Controller.getInstance().getAllVrstaSpecijaliste())
                cmbVrste.addItem(vr);
            TableColumn col=tblDoktor.getColumnModel().getColumn(3);
            col.setCellEditor(new DefaultCellEditor(cmbVrste));
        } catch (Exception ex) {
            if(ex instanceof SocketException){
                endProgram();
            }
            else{
            System.out.println("Greska u setTable u FormDoktorTable");
            System.out.println(ex.getMessage());
            ex.printStackTrace();}
        }
    }
}
