/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.termin;

import controler.Controller;
import domain.Doktor;
import domain.Klijent;
import domain.Pregled;
import domain.Termin;
import domain.Usluga;
import domain.VrstaSpecijaliste;
import java.awt.Frame;
import java.io.IOException;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sesion.Session;
import thread.MojInterfejs;
import thread.ThreadClock;

/**
 *
 * @author Rastko
 */
public class FormTermin extends javax.swing.JDialog implements MojInterfejs{

    /**
     * Creates new form FormTermin
     */
    private Thread tht, thc;

    public FormTermin(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            initComponents();
            lblTrenutniKorisnik.setText("Trenutni korisnik: " + Session.getCurrentUser().getFirstName() + " " + Session.getCurrentUser().getLastName());
            thc = new ThreadClock(lblClock);
            thc.start();
            tblTermin.setModel(new TableModelTermin(this));
            populateCmbPregled();
            txtIdTermina.setEditable(false);
            lblIzabraniKlijent.setText("Izaberite klijenta");
            lblIzabraniDoktor.setText("Izaberite doktora");
            lblIzabraneUsluge.setText("Izaberite usluge");
            tblUsluga.setModel(new TableModelUslugaIzbor());
            tht = new Thread((TableModelTermin) tblTermin.getModel());
            tht.start();
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            this.setBounds(0, 0, 1200, 700);
            setLocationRelativeTo(null);
            Session.getInstance().getThread().setMojInterfejs(this);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTrenutniKorisnik = new javax.swing.JLabel();
        lblClock = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblIdTermina = new javax.swing.JLabel();
        lblVremePocetkaTermina = new javax.swing.JLabel();
        lblVremeZavrsetkaTermina = new javax.swing.JLabel();
        lblDatumZavrsetkaTermina = new javax.swing.JLabel();
        lblDatumPocetkaTermina = new javax.swing.JLabel();
        lblVrstaPregleda = new javax.swing.JLabel();
        txtIdTermina = new javax.swing.JTextField();
        txtDatumPocetkaTermina = new javax.swing.JFormattedTextField();
        txtVremePocetkaTermina = new javax.swing.JFormattedTextField();
        txtDatumZavrsetkaTermina = new javax.swing.JFormattedTextField();
        txtVremeZavrsetkaTermina = new javax.swing.JFormattedTextField();
        cmbPregled = new javax.swing.JComboBox<>();
        btnIzborKlijenta = new javax.swing.JButton();
        btnIzborDoktora = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        lblIzabraniKlijent = new javax.swing.JLabel();
        lblIzabraniDoktor = new javax.swing.JLabel();
        btnIzaberiUsluge = new javax.swing.JButton();
        lblIzabraneUsluge = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUsluga = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTermin = new javax.swing.JTable();
        btnIzbrisi = new javax.swing.JToggleButton();
        txtPretraga = new javax.swing.JTextField();
        checkBoxDoktor = new javax.swing.JCheckBox();
        checkBoxKlijent = new javax.swing.JCheckBox();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        lblTrenutniKorisnik.setText("jLabel1");

        lblClock.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTrenutniKorisnik)
                    .addComponent(lblClock))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTrenutniKorisnik)
                .addGap(18, 18, 18)
                .addComponent(lblClock)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblIdTermina.setText("Id termina");

        lblVremePocetkaTermina.setText("Vreme pocetka termina");

        lblVremeZavrsetkaTermina.setText("Vreme zavrsetka termina");

        lblDatumZavrsetkaTermina.setText("Datum zavrsetka termina");

        lblDatumPocetkaTermina.setText("Datum pocetka termina");

        lblVrstaPregleda.setText("Vrsta pregleda");

        txtDatumPocetkaTermina.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));

        txtVremePocetkaTermina.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm"))));

        txtDatumZavrsetkaTermina.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));

        txtVremeZavrsetkaTermina.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm"))));

        cmbPregled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPregledActionPerformed(evt);
            }
        });

        btnIzborKlijenta.setText("Izbor Klijenta za pregled");
        btnIzborKlijenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzborKlijentaActionPerformed(evt);
            }
        });

        btnIzborDoktora.setText("Izbor Doktora za pregled");
        btnIzborDoktora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzborDoktoraActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnIzaberiUsluge.setText("Izaberi usluge");
        btnIzaberiUsluge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzaberiUslugeActionPerformed(evt);
            }
        });

        lblIzabraneUsluge.setText("jLabel1");

        tblUsluga.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblUsluga);

        tblTermin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTermin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTerminMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTermin);

        btnIzbrisi.setText("Izbrisi");
        btnIzbrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbrisiActionPerformed(evt);
            }
        });

        txtPretraga.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPretragaKeyReleased(evt);
            }
        });

        checkBoxDoktor.setText("Pretraga po imenu doktora");
        checkBoxDoktor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxDoktorActionPerformed(evt);
            }
        });

        checkBoxKlijent.setText("Pretraga po imenu klijenta");
        checkBoxKlijent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxKlijentActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnIzbrisi)
                                .addGap(18, 18, 18)
                                .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxDoktor)
                                    .addComponent(checkBoxKlijent))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCancel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblIdTermina)
                                .addGap(18, 18, 18)
                                .addComponent(txtIdTermina, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblVremePocetkaTermina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtVremePocetkaTermina))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblVremeZavrsetkaTermina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtVremeZavrsetkaTermina))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblDatumZavrsetkaTermina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDatumZavrsetkaTermina))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblDatumPocetkaTermina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDatumPocetkaTermina, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblVrstaPregleda)
                                .addGap(18, 18, 18)
                                .addComponent(cmbPregled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIzborKlijenta)
                            .addComponent(lblIzabraniKlijent)
                            .addComponent(btnSacuvaj)
                            .addComponent(btnIzaberiUsluge)
                            .addComponent(btnIzborDoktora)
                            .addComponent(lblIzabraniDoktor)
                            .addComponent(lblIzabraneUsluge))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIdTermina)
                            .addComponent(txtIdTermina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDatumPocetkaTermina)
                            .addComponent(txtDatumPocetkaTermina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIzborKlijenta))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblVremePocetkaTermina)
                                    .addComponent(txtVremePocetkaTermina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDatumZavrsetkaTermina)
                                    .addComponent(txtDatumZavrsetkaTermina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(lblIzabraniKlijent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnIzborDoktora)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblIzabraniDoktor)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblVremeZavrsetkaTermina)
                                    .addComponent(txtVremeZavrsetkaTermina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblVrstaPregleda)
                                    .addComponent(cmbPregled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnIzaberiUsluge)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblIzabraneUsluge)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSacuvaj)))
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnIzbrisi)
                            .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(checkBoxDoktor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxKlijent))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void endProgram(){
        JOptionPane.showMessageDialog(rootPane, "Server vam je prekinuo konekciju");
        this.dispose();      
        System.exit(0);

    }
    
    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            SimpleDateFormat sfd = new SimpleDateFormat("dd/MM/yyyy");
            String datumPocetka = txtDatumPocetkaTermina.getText();
            String vremePocetka = txtVremePocetkaTermina.getText();
            String datumZavrsetka = txtDatumZavrsetkaTermina.getText();
            String vremeZavrsetka = txtVremeZavrsetkaTermina.getText();
            Pregled pregled = (Pregled) cmbPregled.getSelectedItem();
            Klijent klijent = Session.getTerminKlijent();
            Doktor doktor = Session.getTerminDoktor();
            List<Usluga> usluge = Session.getUslugeLista();
            if (usluge == null) {
                JOptionPane.showMessageDialog(rootPane, "Niste izabrali usluge");
            } else {
                if (datumPocetka != null && datumZavrsetka != null && vremePocetka != null && vremeZavrsetka != null) {
                    Date datumOd = sfd.parse(datumPocetka);
                    Date datumDo = sfd.parse(datumZavrsetka);
                    int satPoc = Integer.parseInt(vremePocetka.split(":")[0]);
                    int minPoc = Integer.parseInt(vremePocetka.split(":")[1]);
                    int satZav = Integer.parseInt(vremeZavrsetka.split(":")[0]);
                    int minZav = Integer.parseInt(vremeZavrsetka.split(":")[1]);

                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(datumOd);
                    calendar.set(Calendar.HOUR_OF_DAY, satPoc);
                    calendar.set(Calendar.MINUTE, minPoc);
                    calendar.set(Calendar.SECOND, 0);
                    datumOd = calendar.getTime();

                    calendar.setTime(datumDo);
                    calendar.set(Calendar.HOUR_OF_DAY, satZav);
                    calendar.set(Calendar.MINUTE, minZav);
                    calendar.set(Calendar.SECOND, 0);
                    datumDo = calendar.getTime();

                    if (datumOd.before(datumDo)) {
                        if (klijent == null) {
                            throw new Exception("Niste izabrali klijenta");
                        }
                        if (doktor == null) {
                            throw new Exception("Niste izabrali doktora");
                        }
                        Date sad = new Date();
                        if (datumOd.before(sad)) {
                            throw new Exception("Datum pocetka termina je pre trenutnog datuma i vremena");
                        }
                        if (datumDo.before(sad)) {
                            throw new Exception("Datum zavrsetka termina je pre trenutnog datma i vremena");
                        }
                        Termin termin = new Termin(datumOd, datumDo, klijent, doktor, pregled, usluge);

                        if (Controller.getInstance().addTermin(termin)) {
                            JOptionPane.showMessageDialog(rootPane, "Uspesno ste uneli termin");
                            TableModelTermin tblm = (TableModelTermin) tblTermin.getModel();
                            tblm.refreshTable();
                            Session.setTerminDoktor(null);
                            Session.setTerminKlijent(null);
                            Session.setUslugeLista(null);
                            lblIzabraniKlijent.setText("Izaberite klijenta");
                            lblIzabraniDoktor.setText("Izaberite doktora");
                            txtDatumPocetkaTermina.setText("");
                            txtDatumZavrsetkaTermina.setText("");
                            txtVremePocetkaTermina.setText("");
                            txtVremeZavrsetkaTermina.setText("");
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Termin Nije unet");
                        }

                    } else {
                        throw new Exception("Datum pocetka termina je posle datuma zavrsetka. Unesite datume ispravno");
                    }
                } else {
                    throw new Exception("Niste ispravno uneli datum i/ili vreme pocetka i/ili zavrsetka termina");
                }
            }
        } catch (Exception e) {
            if(e instanceof SocketException)
                endProgram();
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
            System.out.println("Greska u FormTermin.sacuvaj");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnIzborKlijentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzborKlijentaActionPerformed
        new FormKlijentTableIzbor((Frame) this.getParent(), rootPaneCheckingEnabled).setVisible(true);
    }//GEN-LAST:event_btnIzborKlijentaActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        try {
            Klijent k = Session.getTerminKlijent();
            Doktor d = Session.getTerminDoktor();
            if (k != null) {
                lblIzabraniKlijent.setText("Izabrani klijent: " + k.toString());
            }
            if (d != null) {
                lblIzabraniDoktor.setText("Izabrani doktor: " + d.toString());
            }
            if (Session.getUslugeLista() != null) {
                lblIzabraneUsluge.setText("Usluge su izabrane");
            }
            Session.getInstance().getThread().setMojInterfejs(this);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowGainedFocus

    private void btnIzborDoktoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzborDoktoraActionPerformed
        VrstaSpecijaliste vr = ((Pregled) cmbPregled.getSelectedItem()).getVrstaSpecijalisteZaPregled();
        new FormDoktorTableIzbor((Frame) this.getParent(), rootPaneCheckingEnabled, vr).setVisible(true);
    }//GEN-LAST:event_btnIzborDoktoraActionPerformed

    private void btnIzbrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbrisiActionPerformed
        int i = tblTermin.getSelectedRow();
        if (i == -1) {
            JOptionPane.showMessageDialog(rootPane, "Niste izabrali termin za brisanje");
        } else {
            int k = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da obrisete izabrani pregled", "Brisanje pregleda", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            try {
                if (Controller.getInstance().deleteTermin(((TableModelTermin) tblTermin.getModel()).getSelectedTermin(i))) {
                    ((TableModelTermin) tblTermin.getModel()).refreshTable();
                    ((TableModelUslugaIzbor) tblUsluga.getModel()).setUsluge(new LinkedList<>());
                    JOptionPane.showMessageDialog(rootPane, "Uspesno izbrisan termin");
                } else {
                    JOptionPane.showMessageDialog(this, "Termin nije izbrisan");
                }
            } catch (Exception e) {
                if(e instanceof SocketException)
                    endProgram();
                System.out.println("Doslo je do greske prilikom brisanja termina");
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this, e.getMessage());
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnIzbrisiActionPerformed

    private void cmbPregledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPregledActionPerformed
        Session.setTerminDoktor(null);
        lblIzabraniDoktor.setText("Izaberite doktora");
    }//GEN-LAST:event_cmbPregledActionPerformed

    private void checkBoxDoktorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxDoktorActionPerformed
        checkBoxKlijent.setSelected(false);
    }//GEN-LAST:event_checkBoxDoktorActionPerformed

    private void checkBoxKlijentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxKlijentActionPerformed
        checkBoxDoktor.setSelected(false);
    }//GEN-LAST:event_checkBoxKlijentActionPerformed

    private void tblTerminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTerminMouseClicked
        int i = tblTermin.getSelectedRow();
        if (i > -1) {
            Termin t = ((TableModelTermin) tblTermin.getModel()).getSelectedTermin(i);
            txtIdTermina.setText(Long.toString(t.getTerminId()));
            ((TableModelUslugaIzbor) tblUsluga.getModel()).setUsluge(t.getUsluge());
        } else {
            txtIdTermina.setText("");
            ((TableModelUslugaIzbor) tblUsluga.getModel()).setUsluge(new LinkedList<>());
        }
    }//GEN-LAST:event_tblTerminMouseClicked

    private void btnIzaberiUslugeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzaberiUslugeActionPerformed
        Pregled pregled = (Pregled) cmbPregled.getSelectedItem();
        new FormUslugaIzbor((Frame) this.getParent(), true, pregled).setVisible(true);
    }//GEN-LAST:event_btnIzaberiUslugeActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        tht.interrupt();
        thc.interrupt();
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtPretragaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretragaKeyReleased
        try {
            String kriterijum = txtPretraga.getText().trim();
            TableModelTermin tbm = (TableModelTermin) tblTermin.getModel();
            if (kriterijum.equals("")) {
                tbm.setKriterijum(kriterijum);
            } else {
                if (checkBoxDoktor.isSelected()) {
                    tbm.searchDoktor(kriterijum);
                } else if (checkBoxKlijent.isSelected()) {
                    tbm.searchKlijent(kriterijum);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Niste izabrali po kom kriterijumu se vrsi pretraga");
                }
            }
        } catch (Exception ex) {
            if(ex instanceof SocketException)
                endProgram();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_txtPretragaKeyReleased

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnIzaberiUsluge;
    private javax.swing.JButton btnIzborDoktora;
    private javax.swing.JButton btnIzborKlijenta;
    private javax.swing.JToggleButton btnIzbrisi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JCheckBox checkBoxDoktor;
    private javax.swing.JCheckBox checkBoxKlijent;
    private javax.swing.JComboBox<Pregled> cmbPregled;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblClock;
    private javax.swing.JLabel lblDatumPocetkaTermina;
    private javax.swing.JLabel lblDatumZavrsetkaTermina;
    private javax.swing.JLabel lblIdTermina;
    private javax.swing.JLabel lblIzabraneUsluge;
    private javax.swing.JLabel lblIzabraniDoktor;
    private javax.swing.JLabel lblIzabraniKlijent;
    private javax.swing.JLabel lblTrenutniKorisnik;
    private javax.swing.JLabel lblVremePocetkaTermina;
    private javax.swing.JLabel lblVremeZavrsetkaTermina;
    private javax.swing.JLabel lblVrstaPregleda;
    private javax.swing.JTable tblTermin;
    private javax.swing.JTable tblUsluga;
    private javax.swing.JFormattedTextField txtDatumPocetkaTermina;
    private javax.swing.JFormattedTextField txtDatumZavrsetkaTermina;
    private javax.swing.JTextField txtIdTermina;
    private javax.swing.JTextField txtPretraga;
    private javax.swing.JFormattedTextField txtVremePocetkaTermina;
    private javax.swing.JFormattedTextField txtVremeZavrsetkaTermina;
    // End of variables declaration//GEN-END:variables

    private void populateCmbPregled() {
        try {
            cmbPregled.removeAllItems();
            List<Pregled> pregledi = Controller.getInstance().getAllPregledi();
            for (Pregled pregled : pregledi) {
                cmbPregled.addItem(pregled);
            }
        } catch (Exception ex) {
            if(ex instanceof SocketException)
                endProgram();
            System.out.println("Greska u populateCmbPregled");
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        }
    }

}
